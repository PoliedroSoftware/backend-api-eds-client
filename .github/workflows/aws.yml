name: Build, Test, Deploy to ECS

permissions:
  contents: read
  pull-requests: read

on:
  push:
    branches:
      - main

  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
      - 'release/*'
      - 'releasecandidate/*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dotnet:
    uses: ./.github/workflows/reusable-dotnet-build.yml
    with:
      dotnet-version: '8.0.x'
      configuration: 'Release'
      solution-path: 'Poliedro.Client.sln'
      run-tests: true
      cache-key-suffix: ${{ github.sha }}

  docker:
    if: github.event.pull_request.merged == true || github.ref == 'refs/heads/main'
    needs: [dotnet]
    uses: ./.github/workflows/reusable-docker-build.yml
    with:
      image-name: ${{ vars.DOCKERHUB_REPOSITORY_CLIENT || 'backend-api-eds-client' }}
      image-tag: 'latest'
      registry-type: 'both'  # Push to both ECR and Docker Hub
      aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME_CLIENT }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}             
      
  deploy-dev:
    if: github.event.pull_request.merged == true || github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/reusable-aws-deploy.yml
    with:
      environment: dev
      aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}
      wait-for-deployment: true
      deployment-timeout: '10'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
      AWS_ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
      TASK_DEFINITION_ARN: ${{ secrets.TASK_DEFINITION_ARN }}
